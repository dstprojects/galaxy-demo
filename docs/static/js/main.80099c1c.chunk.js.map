{"version":3,"sources":["shaders/galaxy/GalaxyMaterial.js","components/Galaxy.js","App.js","index.js"],"names":["GalaxyMaterial","uniforms","uTime","value","uSize","vertexShader","fragmentShader","this","v","THREE","extend","Galaxy","count","shader","useRef","useMemo","parameters","size","radius","branches","spin","randomness","randomnessPower","insideColor","outsideColor","positionsArray","Float32Array","colorsArray","scalesArray","randomnessArray","i","i3","Math","random","branchAngle","PI","cos","sin","randomX","pow","randomY","randomZ","mixedColor","clone","lerp","r","g","b","useFrame","state","delta","current","time","attach","attachObject","array","itemSize","ref","depthWrite","blending","vertexColors","useStore","create","set","x","y","z","changeLookAT","position","center","Movement","vec","camera","useThree","lookAt","App","moveCamera","useCallback","checkScroll","scrollY","window","innerHeight","useEffect","addEventListener","e","removeEventListener","s","ScrollProxy","on","console","log","off","id","args","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80099c1c.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { extend } from '@react-three/fiber'\n\n\nexport default class GalaxyMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        uTime: { value: 0 },\n        uSize: { value: 30 },\n      },\n      vertexShader: `\n        uniform float uTime;\n        uniform float uSize;\n        \n        attribute float aScale;\n        attribute vec3 aRandomness;\n        \n        varying vec3 vColor;\n        \n        void main(){\n            /*\n            * Position\n            */\n        \n            vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        \n            // Spin \n            float angle = atan(modelPosition.x, modelPosition.z);\n            float distanceToCenter = length(modelPosition.xz);\n            float angleOffset = (1.0 / (distanceToCenter) ) * uTime * 0.2;\n            angle += angleOffset;\n            modelPosition.x = cos(angle) * (distanceToCenter + 2.0);\n            modelPosition.z = sin(angle) * (distanceToCenter + 2.0);\n        \n            // Randomness\n            modelPosition.xyz += aRandomness ;\n        \n            vec4 viewPosition = viewMatrix * modelPosition;\n            vec4 projectedPosition = projectionMatrix * viewPosition;\n            gl_Position = projectedPosition;\n        \n        \n            /*\n            * Size\n            */\n        \n            gl_PointSize = uSize * aScale;\n            gl_PointSize *= ( 1.0 / - viewPosition.z );\n        \n            /*\n            *\n            */\n            vColor = color;\n        }\n      `,\n      fragmentShader: `\n\n        varying vec3 vColor;\n\n        void main(){\n                \n            // Ligth point\n            float strength = distance(gl_PointCoord, vec2(0.5));\n            strength = 1.0 - strength;\n            strength = pow(strength, 10.0);\n        \n            // Final color\n            vec3 color = mix( vec3(0.0), vColor, strength );\n        \n            gl_FragColor = vec4(color,1.0);\n        \n        }\n\n      `,\n    })\n  }\n\n  get time() {\n    return this.uniforms.uTime.value\n  }\n\n  set time(v) {\n    this.uniforms.uTime.value = v\n  }\n}\n\nextend({ GalaxyMaterial })\n","import { useFrame } from '@react-three/fiber'\nimport React, { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport '../shaders/galaxy/GalaxyMaterial'\n\n\nexport const Galaxy = ({ count = 200000 }) => {\n\n    const shader = useRef()\n\n    const [positionsArray, colorsArray, scalesArray, randomnessArray ] = useMemo(() => {\n\n        const parameters = {}\n        parameters.count = count\n        parameters.size = 0.005\n        parameters.radius = 5\n        parameters.branches = 3\n        parameters.spin = 1\n        parameters.randomness = 0.5\n        parameters.randomnessPower = 3\n        parameters.insideColor = '#00FF4C'\n        parameters.outsideColor = '#FF0072'\n\n        const insideColor = new THREE.Color(parameters.insideColor)\n        const outsideColor = new THREE.Color(parameters.outsideColor)\n\n        const positionsArray = new Float32Array(parameters.count * 3)\n        const colorsArray = new Float32Array(parameters.count * 3)\n        const scalesArray = new Float32Array(parameters.count * 1)\n        const randomnessArray = new Float32Array(parameters.count * 3)\n\n        for(let i = 0; i < parameters.count; i++)\n        {\n            const i3 = i * 3\n\n            // Position\n            const radius = Math.random() * parameters.radius\n\n            const branchAngle = (i % parameters.branches) / parameters.branches * Math.PI * 2\n\n            positionsArray[i3    ] = Math.cos(branchAngle) * radius \n            positionsArray[i3 + 1] = 0.0\n            positionsArray[i3 + 2] = Math.sin(branchAngle) * radius \n\n            // Randomness\n\n            const randomX = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * parameters.randomness * radius\n            const randomY = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * parameters.randomness * radius\n            const randomZ = Math.pow(Math.random(), parameters.randomnessPower) * (Math.random() < 0.5 ? 1 : - 1) * parameters.randomness * radius\n\n            randomnessArray[i3 + 0] = randomX\n            randomnessArray[i3 + 1] = randomY\n            randomnessArray[i3 + 2] = randomZ\n\n            // Color\n            const mixedColor = insideColor.clone()\n            mixedColor.lerp(outsideColor, radius / parameters.radius)\n\n            colorsArray[i3    ] = mixedColor.r\n            colorsArray[i3 + 1] = mixedColor.g\n            colorsArray[i3 + 2] = mixedColor.b\n\n            // Scale\n            scalesArray[i] = Math.random()\n        }\n\n        returnÂ [positionsArray, colorsArray, scalesArray, randomnessArray]\n\n    }, [ count ])\n\n    useFrame((state, delta) => { \n        shader.current.time += delta\n    })\n\n    return(\n        <points key={count} >\n            <bufferGeometry attach=\"geometry\">\n                <bufferAttribute attachObject={['attributes', 'position']} count={count} array={positionsArray} itemSize={3} />\n                <bufferAttribute attachObject={['attributes', 'color']} count={count} array={colorsArray} itemSize={3} />\n                <bufferAttribute attachObject={['attributes', 'aScale']} count={count} array={scalesArray} itemSize={1} />\n                <bufferAttribute attachObject={['attributes', 'aRandomness']} count={count} array={randomnessArray} itemSize={3} />\n            </bufferGeometry>\n            <galaxyMaterial attach=\"material\" ref={shader} depthWrite={false} blending={ THREE.AdditiveBlending } vertexColors={ true } />\n\n        </points>\n    )\n\n}\n","import './App.css';\nimport * as THREE from 'three'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { Suspense, useCallback, useEffect, useMemo } from 'react';\nimport { Galaxy } from './components/Galaxy'\nimport create from 'zustand'\nimport ScrollProxy from 'scroll-proxy'\n\nconst useStore = create((set) => ({\n  x: 0,\n  y: 6,\n  z: 0,\n  changeLookAT: (position) => set(() => ({ x: position.x, y: position.y, z: position.z })),\n  center: () => set({ x: 0, y: 0, z: 0 }),\n}))\n\nconst Movement = () => {\n\n  const state = useStore((state) => state)\n  const vec = new THREE.Vector3()\n\n  const { camera } = useThree()\n  \n  useFrame(() => {\n    camera.position.lerp(vec.set(state.x, state.y, state.z), 0.01)\n    camera.lookAt(0,0,0)\n  })\n\n  return(\n    <Suspense >\n      <Galaxy />\n    </Suspense>\n  )\n}\n\nfunction App() {\n\n  const state = useStore((state) => state)\n\n  const moveCamera = useCallback( (position) => {\n    state.x = position.x\n    state.y = position.y\n    state.z = position.z\n  }, [state] )\n\n  const checkScroll = useCallback( (scrollY) => {\n    if( scrollY < window.innerHeight/3){\n      moveCamera({x: 0, y: 6, z: 0})\n    }else if(scrollY > window.innerHeight/3 && scrollY < window.innerHeight/3 + window.innerHeight ){\n      moveCamera({x: 0, y: 1, z: 8})\n    }else{\n      moveCamera({x: 0, y: 1, z: 2})\n    }\n  }, [moveCamera])\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", (e) => {checkScroll(window.scrollY)})\n    return () => {\n      window.removeEventListener(\"scroll\", (e) => {checkScroll(window.scrollY)})\n    }\n  }, [checkScroll])\n\n  const s = new ScrollProxy()\n\n  useEffect(() => {\n    s.on('offsetY', function() {\n      console.log(\"It looks like someone scrolled the X axis\");\n    });\n    return () => {\n      s.off('offsetY')\n    }\n  }, [s])\n\n\n  return (\n    <div id=\"canvas-container\">\n      <Canvas \n        camera={{position: [0,6,0]}}\n      >\n        <color attach=\"background\" args={['#000']} />\n        <Movement />\n      </Canvas>\n      <h1 className=\"titulo\" onClick={() => {moveCamera({x: 0, y: 1, z: 8})}} >Nobrainer</h1>\n    </div>      \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}